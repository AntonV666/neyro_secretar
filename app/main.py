# app/main.py
import asyncio
import logging
import os
from pathlib import Path
from datetime import timedelta, datetime
from zoneinfo import ZoneInfo

from dotenv import load_dotenv
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, FSInputFile

from app.nlu import parse_intent
from app.calendar_client import CalendarClient
from app.storage import Storage
from app.stt import transcribe_voice
from app.tts import synthesize_tts_async


# ---------- CONFIG ----------
load_dotenv()
logging.basicConfig(level=logging.INFO)

TZ = os.getenv("TZ", "Asia/Yekaterinburg")
SCHED_TZ = ZoneInfo(TZ)  # –µ–¥–∏–Ω–∞—è TZ –¥–ª—è –≤—Å–µ–≥–æ
BOT_TOKEN = os.getenv("TG_BOT_TOKEN")
OWNER_ID = int(os.getenv("TG_OWNER_ID", "0"))
REMINDER_MIN = int(os.getenv("REMINDER_MINUTES_BEFORE", "30"))        # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ Google
BOT_REMINDER_MIN = int(os.getenv("BOT_REMINDER_MINUTES_BEFORE", "15"))  # –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞

bot = Bot(BOT_TOKEN)
dp = Dispatcher()
scheduler = AsyncIOScheduler(
    timezone=SCHED_TZ,
    job_defaults={
        "coalesce": True,
        "misfire_grace_time": 60,
    },
)

cal = CalendarClient()
db = Storage("sqlite.db")

HELP_TEXT = (
    "–ù–µ –ø–æ–Ω—è–ª–∞ –∑–∞–ø—Ä–æ—Å. –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –Ω–∞–ø–æ–º–Ω–∏ –æ–ø–ª–∞—Ç–∏—Ç—å —Ö–æ—Å—Ç–∏–Ω–≥\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ\n"
    "‚Ä¢ –≤ –ø—è—Ç–Ω–∏—Ü—É –≤ 14 –≤—Å—Ç—Ä–µ—á–∞ —Å –ò–≤–∞–Ω–æ–º –Ω–∞ —á–∞—Å\n"
    "‚Ä¢ —Å–æ–∑–¥–∞–π –≤—Å—Ç—Ä–µ—á—É –∑–∞–≤—Ç—Ä–∞ –≤ 15:30 —Å –∫–ª–∏–µ–Ω—Ç–æ–º\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 45 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä\n"
    "‚Ä¢ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ –≤ 9 —É—Ç—Ä–∞ —Å–æ–≤–µ—â–∞–Ω–∏–µ –Ω–∞ –ø–æ–ª—Ç–æ—Ä–∞ —á–∞—Å–∞\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –≤ 18:00 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞\n"
    "‚Ä¢ –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 11:00 –∑–∞–ø–∏—Å—å –∫ –≤—Ä–∞—á—É\n"
    "‚Ä¢ –Ω–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç –≤—ã–∫–ª—é—á–∏—Ç—å —á–∞–π–Ω–∏–∫\n"
    "‚Ä¢ –≤ —Å—É–±–±–æ—Ç—É –≤ 19:00 –ø–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ\n"
    "‚Ä¢ –∑–∞–≤—Ç—Ä–∞ –≤ –æ–±–µ–¥ –≤—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π –Ω–∞ 30 –º–∏–Ω—É—Ç\n"
    "‚Ä¢ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –≤ 8 —É—Ç—Ä–∞ –∑–≤–æ–Ω–æ–∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É\n"
    "‚Ä¢ 25 –¥–µ–∫–∞–±—Ä—è –≤ 20:00 –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"
    "‚Ä¢ —Å–µ–≥–æ–¥–Ω—è –≤ 22:00 –Ω–∞–ø–æ–º–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏\n"
    "‚Ä¢ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ –≤–æ –≤—Ç–æ—Ä–Ω–∏–∫ –≤ 14:00 –≤—Å—Ç—Ä–µ—á–∞ –≤ –æ—Ñ–∏—Å–µ\n"
)


# ---------- HELPERS ----------
def _ensure_aware(dt: datetime) -> datetime:
    """–ü—Ä–∏–≤–µ—Å—Ç–∏ datetime –∫ timezone-aware –≤ TZ –∏–∑ .env."""
    if dt.tzinfo is None:
        return dt.replace(tzinfo=SCHED_TZ)
    return dt.astimezone(SCHED_TZ)


async def _send_bot_reminder(summary: str, start_dt: datetime):
    try:
        await bot.send_message(
            OWNER_ID,
            f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{summary}¬ª (–≤ {start_dt.strftime('%H:%M')})", # f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ¬´{summary}¬ª —á–µ—Ä–µ–∑ {BOT_REMINDER_MIN} –º–∏–Ω. (–≤ {start_dt.strftime('%H:%M')})",
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


def _safe_schedule_bot_reminder(summary: str, start_dt: datetime) -> None:
    """–°—Ç–∞–≤–∏—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ –∑–∞ BOT_REMINDER_MIN –º–∏–Ω—É—Ç."""
    start = _ensure_aware(start_dt)
    remind_at = start - timedelta(minutes=BOT_REMINDER_MIN)
    now = datetime.now(SCHED_TZ)

    if remind_at <= now:
        # –µ—Å–ª–∏ –º–æ–º–µ–Ω—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à—ë–ª ‚Äî —à–ª—ë–º —Å—Ä–∞–∑—É
        asyncio.create_task(_send_bot_reminder(summary, start))
    else:
        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –Ω–∞–ø—Ä—è–º—É—é
        scheduler.add_job(
            _send_bot_reminder,
            trigger=DateTrigger(run_date=remind_at),
            args=[summary, start],   # üëà –ø–µ—Ä–µ–¥–∞—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        )


async def send_reply(m: Message, text: str, reply_mode: str = "text"):
    """–û—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º (—Å TTS fallback –≤ —Ç–µ–∫—Å—Ç)."""
    if reply_mode == "voice":
        try:
            voice_path = await synthesize_tts_async(text, out_dir="./tmp_tts")
            await m.answer_voice(voice=FSInputFile(str(voice_path)))
        except Exception as e:
            logging.error(f"TTS error: {e}")
            await m.answer(text)  # fallback –≤ —Ç–µ–∫—Å—Ç
    else:
        await m.answer(text)


# ---------- HANDLERS ----------
@dp.message(F.from_user.id != OWNER_ID)
async def deny_for_others(m: Message):
    await m.answer("–ò–∑–≤–∏–Ω–∏, —ç—Ç–æ—Ç –±–æ—Ç ‚Äî –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞.")


@dp.message(F.voice)
async def handle_voice(m: Message):
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º voice –≤ ./tmp
    tmp_path = Path(f"./tmp/{m.voice.file_unique_id}.ogg")
    tmp_path.parent.mkdir(parents=True, exist_ok=True)

    file = await bot.get_file(m.voice.file_id)
    try:
        await bot.download(file, destination=tmp_path)
    except Exception:
        await bot.download_file(file.file_path, destination=tmp_path)

    # STT ‚Üí —Ç–µ–∫—Å—Ç
    try:
        text = transcribe_voice(str(tmp_path))
    except Exception as e:
        await m.answer(f"–ù–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å: {e}")
        return

    logging.info(f"[STT] —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text!r}")

    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞, –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º
    await process_text(m, text, reply_mode="voice")


@dp.message(F.text)
async def handle_text(m: Message):
    await process_text(m, m.text, reply_mode="text")


# ---------- CORE ----------
async def process_text(m: Message, text: str, reply_mode: str = "text"):
    intent = parse_intent(text, tz=TZ)

    if intent.type == "create":
        if not intent.start:
            await send_reply(m, HELP_TEXT, reply_mode)
            return

        event = cal.create_event(
            intent.title,
            intent.start,
            intent.end,
            reminder_minutes=REMINDER_MIN,  # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Google (popup)
        )

        text_ok = (
            f"–°–æ–∑–¥–∞–ª–∞ —Å–æ–±—ã—Ç–∏–µ ¬´{event['summary']}¬ª –Ω–∞ {event['when_human']}. "
            f"–ù–∞–ø–æ–º–Ω—é –∑–∞ {BOT_REMINDER_MIN} –º–∏–Ω."
        )
        await send_reply(m, text_ok, reply_mode)

        # —Ç–µ–ª–µ–≥—Ä–∞–º-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –±–æ—Ç–∞
        _safe_schedule_bot_reminder(event['summary'], intent.start)

    elif intent.type == "list":
        events = cal.list_events(intent.range_start, intent.range_end)
        if not events:
            await send_reply(m, "–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.", reply_mode)
        else:
            pretty = "\n".join([e["human"] for e in events])
            await send_reply(m, pretty, reply_mode)

    elif intent.type == "move":
        res = cal.move_event(intent.selector, intent.new_start, intent.new_end)
        await send_reply(m, res["human"], reply_mode)

    elif intent.type == "delete":
        res = cal.delete_event(intent.selector)
        await send_reply(m, res["human"], reply_mode)

    else:
        await send_reply(m, HELP_TEXT, reply_mode)


# ---------- ENTRY ----------
async def main():
    scheduler.start()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())

