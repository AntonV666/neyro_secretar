# app/calendar_client.py

import os
from pathlib import Path
from datetime import datetime, timedelta, timezone
from typing import List, Dict, Optional   # üëà –¥–æ–±–∞–≤–∏–ª–∏

from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build


def _ensure_rfc3339(dt: datetime) -> str:
    """
    –ü—Ä–∏–≤–æ–¥–∏—Ç datetime –∫ RFC3339.
    –ï—Å–ª–∏ datetime ¬´naive¬ª, –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π TZ –∏–∑ TZ –∏–ª–∏ UTC.
    """
    if dt.tzinfo is None:
        # –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å TZ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è, –∏–Ω–∞—á–µ UTC
        tz_name = os.getenv("TZ")
        if tz_name:
            # –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–∏–≤—è–∑–∫–∞: —Å–º–µ—â–µ–Ω–∏–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
            # (–¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Ä–∞–±–æ—á–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ)
            offset = datetime.now().astimezone().utcoffset() or timedelta(0)
            tz = timezone(offset)
        else:
            tz = timezone.utc
        dt = dt.replace(tzinfo=tz)
    return dt.isoformat()


class CalendarClient:
    def __init__(self, calendar_id: str | None = None):
        """
        –û–±—ë—Ä—Ç–∫–∞ –Ω–∞–¥ Google Calendar API.
        calendar_id = 'primary' (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é) –∏–ª–∏ ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.
        """
        self.calendar_id = calendar_id or os.getenv("CALENDAR_ID", "primary")

        # –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞
        ROOT_DIR = Path(__file__).resolve().parents[1]

        # ‚úÖ –ò—â–µ–º –¢–£–¢ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: .../state/google_token.json
        default_token = ROOT_DIR / "state" / "google_token.json"

        # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_TOKEN_PATH
        token_path = Path(os.getenv("GOOGLE_TOKEN_PATH", default_token)).resolve()

        if not token_path.exists():
            raise RuntimeError(
                f"–ù–µ—Ç —Ñ–∞–π–ª–∞ google_token.json. –û–∂–∏–¥–∞–ª—Å—è –ø–æ –ø—É—Ç–∏: {token_path}\n"
                "–°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /oauth/google –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ GOOGLE_TOKEN_PATH."
            )

        self.creds = Credentials.from_authorized_user_file(
            str(token_path),
            ["https://www.googleapis.com/auth/calendar"]
        )
        self.service = build("calendar", "v3", credentials=self.creds)

    # ---- CREATE ----
    # app/calendar_client.py ‚Äî –∑–∞–º–µ–Ω–∏—Ç–µ –º–µ—Ç–æ–¥ create_event —Ü–µ–ª–∏–∫–æ–º
    def create_event(self, title, start, end, reminder_minutes=30):
        tz_name = os.getenv("TZ", "UTC")

        def _dt_payload(dt: datetime) -> Dict[str, str]:
            # Google –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏–±–æ ISO —Å–æ —Å–º–µ—â–µ–Ω–∏–µ–º (–µ—Å–ª–∏ aware),
            # –ª–∏–±–æ naive + –æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "timeZone".
            if dt.tzinfo:
                return {"dateTime": dt.isoformat()}  # —É–∂–µ aware, —Å–º–µ—â–µ–Ω–∏–µ –≤–Ω—É—Ç—Ä–∏ —Å—Ç—Ä–æ–∫–∏
            else:
                return {"dateTime": dt.isoformat(), "timeZone": tz_name}

        if start and end:
            body = {
                "summary": title,
                "start": _dt_payload(start),
                "end": _dt_payload(end),
                "reminders": {
                    "useDefault": False,
                    "overrides": [{"method": "popup", "minutes": reminder_minutes}],
                },
            }
        elif start and isinstance(start, datetime) and start.time() == datetime.min.time():
            # —Ü–µ–ª–æ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ ‚Äî –∑–¥–µ—Å—å –ù–ï–õ–¨–ó–Ø dateTime, —Ç–æ–ª—å–∫–æ date
            body = {
                "summary": title,
                "start": {"date": start.date().isoformat()},
                "end": {"date": (start.date() + timedelta(days=1)).isoformat()},
                "reminders": {
                    "useDefault": False,
                    "overrides": [{"method": "popup", "minutes": reminder_minutes}],
                },
            }
        else:
            raise ValueError("–ù–µ –∑–∞–¥–∞–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–æ–±—ã—Ç–∏—è")

        event = self.service.events().insert(calendarId=self.calendar_id, body=body).execute()
        return {
            "id": event["id"],
            "summary": event.get("summary", title),
            "when_human": start.strftime("%d.%m.%Y %H:%M") if start else "(–¥–∞—Ç–∞)",
        }


    # ---- LIST ----
    def list_events(self, start: datetime, end: datetime) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [start, end) —Å –∫—Ä–∞—Å–∏–≤—ã–º –ø–æ–ª–µ–º 'human'.
        –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏.
        """
        items: List[Dict] = []
        page_token = None
        while True:
            response = self.service.events().list(
                calendarId=self.calendar_id,
                timeMin=_ensure_rfc3339(start),
                timeMax=_ensure_rfc3339(end),
                singleEvents=True,
                orderBy="startTime",
                maxResults=2500,
                pageToken=page_token
            ).execute()

            for ev in response.get("items", []):
                # start –º–æ–∂–µ—Ç –±—ã—Ç—å dateTime (–æ–±—ã—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ) –∏–ª–∏ date (—Ü–µ–ª–æ–¥–Ω–µ–≤–Ω–æ–µ)
                start_dt = ev.get("start", {})
                end_dt = ev.get("end", {})
                summary = ev.get("summary", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)")

                if "dateTime" in start_dt:
                    when = start_dt["dateTime"]
                    # —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ
                    try:
                        dt = datetime.fromisoformat(when.replace("Z", "+00:00"))
                        human = f"{dt.strftime('%d.%m.%Y %H:%M')}: {summary}"
                    except Exception:
                        human = f"{when}: {summary}"
                else:
                    # —Ü–µ–ª–æ–¥–Ω–µ–≤–Ω–æ–µ
                    date_str = start_dt.get("date")
                    human = f"{date_str}: {summary}" if date_str else summary

                items.append({
                    "id": ev["id"],
                    "summary": summary,
                    "start": start_dt,
                    "end": end_dt,
                    "human": human,
                })

            page_token = response.get("nextPageToken")
            if not page_token:
                break

        return items

    # ---- MOVE ----
    def move_event(self, selector: str, new_start: datetime, new_end: Optional[datetime]) -> Dict[str, str]:
        """
        –ü–µ—Ä–µ–Ω–æ—Å —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ selector (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
        –ë–µ—Ä—ë–º –±–ª–∏–∂–∞–π—à–µ–µ –±—É–¥—É—â–µ–µ —Å–æ–±—ã—Ç–∏–µ, –∏–Ω–∞—á–µ —Å–∞–º–æ–µ —Å–≤–µ–∂–µ–µ –ø—Ä–æ—à–ª–æ–µ.
        """
        now = datetime.now(timezone.utc)
        events = self.list_events(
            now - timedelta(days=30),
            now + timedelta(days=365),
        )

        sel = selector.lower()
        matches = [e for e in events if sel in e["summary"].lower()]

        if not matches:
            return {"human": "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –±—É–¥—É—â–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º –ø—Ä–æ—à–ª—ã–µ (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        def _start_dt(ev: Dict) -> datetime:
            s = ev["start"]
            if "dateTime" in s:
                return datetime.fromisoformat(s["dateTime"].replace("Z", "+00:00"))
            # –¥–ª—è —Ü–µ–ª–æ–¥–Ω–µ–≤–Ω—ã—Ö –±–µ—Ä—ë–º –Ω–∞—á–∞–ª–æ –¥–Ω—è –≤ UTC
            return datetime.fromisoformat(s["date"] + "T00:00:00+00:00")

        future = [e for e in matches if _start_dt(e) >= now]
        if future:
            target = sorted(future, key=_start_dt)[0]
        else:
            target = sorted(matches, key=_start_dt, reverse=True)[0]

        if new_end is None:
            new_end = new_start + timedelta(minutes=30)

        body = {
            "start": {"dateTime": _ensure_rfc3339(new_start)},
            "end": {"dateTime": _ensure_rfc3339(new_end)},
        }
        updated = self.service.events().patch(
            calendarId=self.calendar_id, eventId=target["id"], body=body
        ).execute()
        return {"human": f"–ü–µ—Ä–µ–Ω—ë—Å ¬´{updated.get('summary', '')}¬ª –Ω–∞ {new_start.strftime('%d.%m.%Y %H:%M')}"}

    # ---- DELETE ----
    def delete_event(self, selector: str) -> Dict[str, str]:
        """
        –£–¥–∞–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ selector (–±–µ–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞).
        –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ ‚Äî –∫–∞–∫ –≤ move_event.
        """
        now = datetime.now(timezone.utc)
        events = self.list_events(
            now - timedelta(days=30),
            now + timedelta(days=365),
        )

        sel = selector.lower()
        matches = [e for e in events if sel in e["summary"].lower()]

        if not matches:
            return {"human": "–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"}

        def _start_dt(ev: Dict) -> datetime:
            s = ev["start"]
            if "dateTime" in s:
                return datetime.fromisoformat(s["dateTime"].replace("Z", "+00:00"))
            return datetime.fromisoformat(s["date"] + "T00:00:00+00:00")

        future = [e for e in matches if _start_dt(e) >= now]
        if future:
            target = sorted(future, key=_start_dt)[0]
        else:
            target = sorted(matches, key=_start_dt, reverse=True)[0]

        self.service.events().delete(calendarId=self.calendar_id, eventId=target["id"]).execute()
        return {"human": f"–£–¥–∞–ª–∏–ª —Å–æ–±—ã—Ç–∏–µ: {target['summary']}"}

